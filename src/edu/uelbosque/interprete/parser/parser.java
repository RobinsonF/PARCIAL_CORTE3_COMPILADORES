
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.uelbosque.interprete.parser;

import java_cup.runtime.*;
import edu.uelbosque.interprete.ast.*;
import edu.uelbosque.interprete.ast.Number;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\007\000\002\003" +
    "\005\000\002\006\005\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\011\006\000\002\012\004\000\002\012\003\000\002" +
    "\013\007\000\002\014\005\000\002\015\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\006" +
    "\000\002\020\004\000\002\020\003\000\002\021\007\000" +
    "\002\022\005\000\002\023\005\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\006\000\002\026" +
    "\004\000\002\026\003\000\002\027\006\000\002\030\003" +
    "\000\002\031\004\000\002\031\003\000\002\032\007\000" +
    "\002\033\005\000\002\034\007\000\002\035\005\000\002" +
    "\035\003\000\002\036\003\000\002\040\003\000\002\041" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\004\005\001\002\000\004\006\012\001" +
    "\002\000\004\046\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\026\011\001\002\000" +
    "\004\006\uffff\001\002\000\004\046\125\001\002\000\004" +
    "\015\014\001\002\000\004\042\102\001\002\000\004\011" +
    "\016\001\002\000\004\042\057\001\002\000\004\021\021" +
    "\001\002\000\004\002\000\001\002\000\004\042\022\001" +
    "\002\000\004\022\024\001\002\000\006\022\uffe4\043\uffe4" +
    "\001\002\000\004\042\030\001\002\000\006\022\024\043" +
    "\027\001\002\000\006\022\uffe5\043\uffe5\001\002\000\004" +
    "\002\uffe6\001\002\000\004\023\033\001\002\000\006\023" +
    "\uffe0\043\uffe0\001\002\000\004\043\056\001\002\000\004" +
    "\042\036\001\002\000\006\023\033\043\uffe2\001\002\000" +
    "\006\023\uffe1\043\uffe1\001\002\000\004\024\040\001\002" +
    "\000\004\025\043\001\002\000\004\046\041\001\002\000" +
    "\004\026\042\001\002\000\004\025\uffde\001\002\000\004" +
    "\046\046\001\002\000\004\043\045\001\002\000\006\023" +
    "\uffdf\043\uffdf\001\002\000\004\044\047\001\002\000\004" +
    "\030\051\001\002\000\006\045\uffdb\047\054\001\002\000" +
    "\006\045\uffda\047\uffda\001\002\000\004\045\053\001\002" +
    "\000\004\043\uffdd\001\002\000\004\030\051\001\002\000" +
    "\004\045\uffdc\001\002\000\006\022\uffe3\043\uffe3\001\002" +
    "\000\004\012\060\001\002\000\004\042\065\001\002\000" +
    "\006\012\uffed\043\uffed\001\002\000\006\012\060\043\064" +
    "\001\002\000\006\012\uffee\043\uffee\001\002\000\004\021" +
    "\uffef\001\002\000\004\013\066\001\002\000\004\046\100" +
    "\001\002\000\004\014\070\001\002\000\004\046\073\001" +
    "\002\000\004\043\072\001\002\000\006\012\uffec\043\uffec" +
    "\001\002\000\010\027\077\030\074\031\076\001\002\000" +
    "\004\043\uffe9\001\002\000\004\043\uffea\001\002\000\004" +
    "\043\uffe7\001\002\000\004\043\uffe8\001\002\000\004\026" +
    "\101\001\002\000\004\014\uffeb\001\002\000\004\016\103" +
    "\001\002\000\004\042\110\001\002\000\006\016\ufff6\043" +
    "\ufff6\001\002\000\006\016\103\043\106\001\002\000\004" +
    "\011\ufff8\001\002\000\006\016\ufff7\043\ufff7\001\002\000" +
    "\004\017\112\001\002\000\004\020\116\001\002\000\004" +
    "\046\113\001\002\000\004\026\114\001\002\000\004\020" +
    "\ufff4\001\002\000\004\043\124\001\002\000\004\046\117" +
    "\001\002\000\010\027\123\030\121\031\122\001\002\000" +
    "\004\043\ufff3\001\002\000\004\043\ufff2\001\002\000\004" +
    "\043\ufff0\001\002\000\004\043\ufff1\001\002\000\006\016" +
    "\ufff5\043\ufff5\001\002\000\014\032\126\033\130\034\132" +
    "\035\127\036\131\001\002\000\004\015\ufffd\001\002\000" +
    "\004\015\ufffa\001\002\000\004\015\ufffc\001\002\000\004" +
    "\015\ufff9\001\002\000\004\015\ufffb\001\002\000\004\015" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\006\002\005\003\003\001\001\000\004\006" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\014\001\001\000\002\001\001\000\004" +
    "\017\016\001\001\000\002\001\001\000\004\025\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\024" +
    "\027\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\031\031\033\032\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\034" +
    "\001\001\000\002\001\001\000\004\033\036\001\001\000" +
    "\004\034\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\051\036\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\054\036\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\061\021" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\066\001\001\000\002\001\001\000\004\023\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\104\013\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\110" +
    "\001\001\000\004\015\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  SymbolTable st = new SymbolTable();



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= DOCUMENTO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Document start_val = (Document)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DOCUMENTO ::= MODELNAME MODELTYPE INPUTS_NON OUTPUTS_NON MODEL_NON 
            {
              Document RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ModelName mn = (ModelName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ModelType mt = (ModelType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Inputs i = (Inputs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Outputs o = (Outputs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Model m = (Model)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Document(mn, mt, i, o, m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MODELNAME ::= MODEL_NAME COLON FREETEXT 
            {
              ModelName RESULT =null;
		 RESULT = new ModelName(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODELNAME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MODELTYPE ::= MODEL_TYPE COLON MODELTYPENAME 
            {
              ModelType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ModelTypeName n = (ModelTypeName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ModelType(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODELTYPE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MODELTYPENAME ::= ANN 
            {
              ModelTypeName RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ModelTypeName("ANN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODELTYPENAME",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MODELTYPENAME ::= TREE 
            {
              ModelTypeName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ModelTypeName("TREE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODELTYPENAME",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MODELTYPENAME ::= RANDOMFOREST 
            {
              ModelTypeName RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ModelTypeName("RANDOMFOREST"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODELTYPENAME",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MODELTYPENAME ::= SVM 
            {
              ModelTypeName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ModelTypeName("SVM"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODELTYPENAME",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MODELTYPENAME ::= DECISIONTREE 
            {
              ModelTypeName RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ModelTypeName("DECISIONTREE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODELTYPENAME",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INPUTS_NON ::= INPUTS LBRACE INPUTLIST RBRACE 
            {
              Inputs RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InputList l = (InputList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Inputs(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPUTS_NON",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INPUTLIST ::= INPUTLIST INPUT_NON 
            {
              InputList RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InputList il = (InputList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Input i = (Input)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			          	RESULT = new InputList(il,i); 
			          	st.addInputList(RESULT);
			          	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPUTLIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INPUTLIST ::= INPUT_NON 
            {
              InputList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Input i = (Input)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			         	RESULT = new InputList(i); 
			         	st.addInputList(RESULT);
			         	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPUTLIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INPUT_NON ::= INPUT LBRACE INPUTNAME INPUTTYPE RBRACE 
            {
              Input RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		InputName in = (InputName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InputType it = (InputType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
       					RESULT = new Input(in, it); 
       					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPUT_NON",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INPUTNAME ::= INPUT_NAME COLON FREETEXT 
            {
              InputName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InputName(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPUTNAME",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INPUTTYPE ::= INPUT_TYPE COLON INPUTTYPENAME 
            {
              InputType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InputTypeName i = (InputTypeName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InputType(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPUTTYPE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INPUTTYPENAME ::= NUMBER 
            {
              InputTypeName RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InputTypeName("NUMBER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPUTTYPENAME",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INPUTTYPENAME ::= CATEGORICAL 
            {
              InputTypeName RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InputTypeName("CATEGORICAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPUTTYPENAME",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INPUTTYPENAME ::= BINARY 
            {
              InputTypeName RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InputTypeName("BINARY"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPUTTYPENAME",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OUTPUTS_NON ::= OUTPUTS LBRACE OUTPUTLIST RBRACE 
            {
              Outputs RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OutputList o = (OutputList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Outputs(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTPUTS_NON",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OUTPUTLIST ::= OUTPUTLIST OUTPUT_NON 
            {
              OutputList RESULT =null;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OutputList ol = (OutputList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Output o = (Output)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			          	RESULT = new OutputList(ol,o); 
			          	st.addOutputList(RESULT);
			          	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTPUTLIST",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OUTPUTLIST ::= OUTPUT_NON 
            {
              OutputList RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Output o = (Output)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			         	RESULT = new OutputList(o); 
			         	st.addOutputList(RESULT);
			         	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTPUTLIST",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OUTPUT_NON ::= OUTPUT LBRACE OUTPUTNAME OUTPUTTYPE RBRACE 
            {
              Output RESULT =null;
		int onleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int onright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OutputName on = (OutputName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int otleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int otright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OutputType ot = (OutputType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Output(on, ot); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTPUT_NON",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OUTPUTNAME ::= OUTPUT_NAME COLON FREETEXT 
            {
              OutputName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OutputName(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTPUTNAME",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OUTPUTTYPE ::= OUTPUT_TYPE COLON OUTPUTTYPENAME 
            {
              OutputType RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OutputTypeName o = (OutputTypeName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OutputType(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTPUTTYPE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OUTPUTTYPENAME ::= NUMBER 
            {
              OutputTypeName RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OutputTypeName("NUMBER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTPUTTYPENAME",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OUTPUTTYPENAME ::= CATEGORICAL 
            {
              OutputTypeName RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OutputTypeName("CATEGORICAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTPUTTYPENAME",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OUTPUTTYPENAME ::= BINARY 
            {
              OutputTypeName RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OutputTypeName("BINARY"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUTPUTTYPENAME",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MODEL_NON ::= MODEL LBRACE LAYERSTLIST_NON RBRACE 
            {
              Model RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LayersTList l = (LayersTList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Model(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODEL_NON",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LAYERSTLIST_NON ::= LAYERSTLIST_NON LAYERS_NON 
            {
              LayersTList RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LayersTList ll = (LayersTList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Layers ln = (Layers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LayersTList(ll, ln); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LAYERSTLIST_NON",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LAYERSTLIST_NON ::= LAYERS_NON 
            {
              LayersTList RESULT =null;
		int lnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Layers ln = (Layers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LayersTList(ln); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LAYERSTLIST_NON",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LAYERS_NON ::= LAYERS LBRACE LAYERSLIST RBRACE 
            {
              Layers RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LayersList l = (LayersList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Layers(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LAYERS_NON",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LAYERSLIST ::= LAYERLIST 
            {
              LayersList RESULT =null;
		int lnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LayerList ln = (LayerList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			      		RESULT = new LayersList(ln); 
			      		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LAYERSLIST",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LAYERLIST ::= LAYERLIST LAYER_NON 
            {
              LayerList RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LayerList ll = (LayerList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Layer ln = (Layer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LayerList(ll, ln); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LAYERLIST",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LAYERLIST ::= LAYER_NON 
            {
              LayerList RESULT =null;
		int lnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Layer ln = (Layer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LayerList(ln); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LAYERLIST",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LAYER_NON ::= LAYER LBRACE LAYERNAME LAYERPARAMS RBRACE 
            {
              Layer RESULT =null;
		int lnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LayerName ln = (LayerName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LayerParams lp = (LayerParams)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Layer(ln, lp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LAYER_NON",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LAYERNAME ::= LAYER_NAME COLON FREETEXT 
            {
              LayerName RESULT =null;
		 RESULT = new LayerName(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LAYERNAME",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LAYERPARAMS ::= LAYER_PARAMS COLON LBRACKET NUMBERS RBRACKET 
            {
              LayerParams RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Numbers ns = (Numbers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            			RESULT = new LayerParams(ns); 
            			st.addLayerParams(RESULT);
            			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LAYERPARAMS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NUMBERS ::= NUMBER_NON COMMA NUMBERS 
            {
              Numbers RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Number n = (Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Numbers ns = (Numbers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			         	RESULT = new Numbers(ns, n); 
			         	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUMBERS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NUMBERS ::= NUMBER_NON 
            {
              Numbers RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Number n = (Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			        	RESULT = new Numbers(n); 
			        	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUMBERS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NUMBER_NON ::= NUMBER 
            {
              Number RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        					RESULT = new Number(n); 
        				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUMBER_NON",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ESCRIB ::= IDENTIFICADOR 
            {
              Write RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Write(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRIB",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IDENTIFICADOR ::= FREETEXT 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                           RESULT = new Variable(v);                         
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}



public SymbolTable getSt() {
	return st;
}

public void setSt(SymbolTable st) {
	this.st = st;
}



}
