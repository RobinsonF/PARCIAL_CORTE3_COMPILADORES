// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: C:/Users/Robinson Gutiï¿½rrez/eclipse-workspace/ParcialCompiladores/src/edu/uelbosque/interprete/lexer/Parcial.flex

package edu.uelbosque.interprete.lexer;

import java_cup.runtime.Symbol;
import edu.uelbosque.interprete.parser.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  
  private String data = "";

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\1\3\2\1\22\0\1\4\13\0"+
    "\1\5\1\0\1\6\1\7\12\10\1\11\6\0\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\2\21\1\23\1\24\1\25\1\26\1\27\1\21\1\30"+
    "\1\31\1\32\1\33\1\34\2\21\1\35\1\21\1\36"+
    "\1\0\1\37\1\0\1\40\1\0\1\41\1\21\1\42"+
    "\1\43\1\44\3\21\1\45\2\21\1\46\1\47\1\50"+
    "\1\51\1\52\1\21\1\53\1\54\1\55\1\56\3\21"+
    "\1\57\1\21\1\60\1\0\1\61\7\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\14\7\1\10\1\11\1\12\1\13\1\14\15\7\1\15"+
    "\13\7\1\16\14\7\1\17\5\7\1\20\1\21\1\22"+
    "\3\7\1\23\5\7\1\24\1\7\1\25\1\7\1\26"+
    "\17\7\1\27\43\7\1\30\1\31\1\7\1\32\1\33"+
    "\1\34\3\7\1\35\1\36\2\7\1\37\1\7\1\40"+
    "\4\7\1\41\1\42\1\7\1\43\1\44\1\7\1\45"+
    "\1\46\4\7\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\62\0\62\0\226\0\310\0\62"+
    "\0\372\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\62\0\62\0\62\0\62"+
    "\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0"+
    "\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u01c2\0\u060e"+
    "\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e"+
    "\0\u07d0\0\u0802\0\u01c2\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u01c2"+
    "\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea"+
    "\0\u0c1c\0\u0c4e\0\u0c80\0\u01c2\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u01c2\0\u0dac\0\u01c2\0\u0dde\0\u0e10\0\u0e42\0\u0e74"+
    "\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u01c2\0\u1130\0\u1162"+
    "\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2"+
    "\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482"+
    "\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612"+
    "\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2"+
    "\0\u17d4\0\u01c2\0\u01c2\0\u1806\0\u01c2\0\u01c2\0\u01c2\0\u1838"+
    "\0\u186a\0\u189c\0\u01c2\0\u01c2\0\u18ce\0\u1900\0\u01c2\0\u1932"+
    "\0\u01c2\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u01c2\0\u01c2\0\u1a2c"+
    "\0\u01c2\0\u01c2\0\u1a5e\0\u01c2\0\u01c2\0\u1a90\0\u1ac2\0\u1af4"+
    "\0\u1b26\0\u01c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\4\15\1\16\1\17"+
    "\1\20\1\15\1\21\1\15\1\22\1\23\1\24\3\15"+
    "\1\25\1\26\1\2\17\15\1\27\1\30\63\0\2\3"+
    "\1\0\1\3\64\0\1\31\62\0\1\7\55\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\13\15\1\32\10\15"+
    "\2\0\20\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\10\15\1\33\13\15\2\0\20\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\1\34\10\15\1\35"+
    "\12\15\2\0\20\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\4\15\1\36\13\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\20\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\24\15\2\0\10\15\1\37\7\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\24\15\2\0\1\15\1\40"+
    "\16\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\24\15\2\0\11\15\1\41\6\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\24\15\2\0\16\15\1\42"+
    "\1\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\4\15\1\43\17\15\2\0\1\15\1\44\16\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\22\15\1\45"+
    "\1\15\2\0\20\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\13\15\1\46\4\15\2\0"+
    "\2\31\1\0\57\31\4\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\13\15\1\47\10\15\2\0\20\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\13\15\1\50"+
    "\10\15\2\0\20\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\20\15\1\51\3\15\2\0\20\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\1\52\20\15"+
    "\1\53\2\15\2\0\20\15\6\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\24\15\2\0\2\15\1\54\15\15"+
    "\6\0\1\15\1\0\1\15\1\0\1\15\1\0\24\15"+
    "\2\0\12\15\1\55\5\15\6\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\24\15\2\0\17\15\1\56\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\3\15\1\57\14\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\15\15\1\60\2\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\6\15\1\61"+
    "\15\15\2\0\20\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\10\15\1\62\7\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\12\15\1\63"+
    "\11\15\2\0\20\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\4\15\1\64\13\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\1\65\23\15"+
    "\2\0\20\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\4\15\1\66\17\15\2\0\20\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\17\15\1\67\4\15"+
    "\2\0\20\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\17\15\1\70\4\15\2\0\20\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\24\15\2\0\5\15"+
    "\1\71\12\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\24\15\2\0\16\15\1\72\1\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\24\15\2\0\4\15"+
    "\1\73\13\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\24\15\2\0\4\15\1\74\13\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\24\15\2\0\12\15"+
    "\1\75\5\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\16\15\1\76\5\15\2\0\20\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\24\15\2\0\3\15"+
    "\1\77\14\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\24\15\2\0\4\15\1\100\13\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\16\15\1\101\5\15"+
    "\2\0\20\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\6\15\1\102\15\15\2\0\20\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\17\15\1\103\4\15"+
    "\2\0\20\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\20\15\1\104\3\15\2\0\20\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\24\15\2\0\14\15"+
    "\1\105\3\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\24\15\2\0\15\15\1\106\2\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\24\15\2\0\13\15"+
    "\1\107\4\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\24\15\2\0\6\15\1\110\11\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\24\15\2\0\16\15"+
    "\1\111\1\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\4\15\1\112\17\15\2\0\20\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\24\15\2\0\11\15"+
    "\1\113\6\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\23\15\1\114\2\0\20\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\14\15\1\115\7\15\2\0"+
    "\20\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\10\15\1\116\13\15\2\0\20\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\4\15\1\117\17\15\2\0"+
    "\20\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\24\15\2\0\5\15\1\120\12\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\24\15\2\0\1\121\13\15"+
    "\1\122\3\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\24\15\2\0\1\123\13\15\1\124\3\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\1\125\17\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\24\15\2\0\15\15\1\126\2\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\17\15\1\127\4\15"+
    "\2\0\20\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\24\15\2\0\7\15\1\130\10\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\16\15\1\131\5\15"+
    "\2\0\20\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\5\15\1\132\16\15\2\0\20\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\16\15\1\133\5\15"+
    "\2\0\20\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\24\15\2\0\11\15\1\134\6\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\13\15\1\135\4\15"+
    "\1\136\3\15\2\0\20\15\6\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\13\15\1\137\1\15\1\140\6\15"+
    "\2\0\20\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\3\15\1\141\1\15\1\142\5\15\1\143\4\15"+
    "\1\144\3\15\2\0\20\15\6\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\24\15\2\0\1\145\13\15\1\146"+
    "\3\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\17\15\1\147\4\15\2\0\20\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\5\15\1\150\16\15\2\0"+
    "\20\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\10\15\1\151\13\15\2\0\20\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\10\15\1\152\13\15\2\0"+
    "\20\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\10\15\1\153\13\15\2\0\20\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\24\15\2\0\10\15\1\154"+
    "\7\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\24\15\2\0\1\15\1\155\16\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\24\15\2\0\17\15\1\156"+
    "\6\0\1\15\1\0\1\15\1\0\1\15\1\0\24\15"+
    "\2\0\1\15\1\157\16\15\6\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\24\15\2\0\1\15\1\160\16\15"+
    "\6\0\1\15\1\0\1\15\1\0\1\15\1\0\24\15"+
    "\2\0\4\15\1\161\13\15\6\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\24\15\2\0\1\15\1\162\16\15"+
    "\6\0\1\15\1\0\1\15\1\0\1\15\1\0\24\15"+
    "\2\0\1\15\1\163\16\15\6\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\24\15\2\0\17\15\1\164\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\13\15\1\165"+
    "\4\15\1\166\3\15\2\0\20\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\10\15\1\167\13\15\2\0"+
    "\20\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\24\15\2\0\11\15\1\170\6\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\2\15\1\171\21\15\2\0"+
    "\20\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\4\15\1\172\17\15\2\0\20\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\13\15\1\173\10\15\2\0"+
    "\20\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\20\15\1\174\3\15\2\0\20\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\24\15\2\0\7\15\1\175"+
    "\10\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\24\15\2\0\12\15\1\176\5\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\24\15\2\0\7\15\1\177"+
    "\10\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\24\15\2\0\13\15\1\200\4\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\24\15\2\0\14\15\1\201"+
    "\3\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\24\15\2\0\7\15\1\202\10\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\24\15\2\0\7\15\1\203"+
    "\10\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\24\15\2\0\12\15\1\204\5\15\6\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\24\15\2\0\1\15\1\205"+
    "\16\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\24\15\2\0\17\15\1\206\6\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\14\15\1\207\7\15\2\0\20\15"+
    "\6\0\1\15\1\0\1\15\1\0\1\15\1\0\24\15"+
    "\2\0\13\15\1\210\4\15\6\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\1\211\23\15\2\0\20\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\16\15\1\212"+
    "\5\15\2\0\20\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\6\15\1\213\15\15\2\0\20\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\13\15\1\214\4\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\4\15\1\215\13\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\4\15\1\216\13\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\4\15\1\217\13\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\1\15\1\220\16\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\2\15\1\221\15\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\5\15\1\222\12\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\4\15\1\223\13\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\4\15\1\224\13\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\7\15\1\225\10\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\12\15\1\226\5\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\13\15\1\227\10\15\2\0\20\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\4\15\1\230\13\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\11\15\1\231\12\15\2\0\20\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\4\15\1\232\13\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\7\15\1\233\10\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\13\15\1\234\4\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\6\15\1\235\11\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\4\15\1\236\13\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\4\15\1\237\13\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\14\15\1\240\3\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\4\15\1\241\13\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\14\15\1\242\3\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\24\15\2\0\5\15\1\243\12\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\24\15\2\0"+
    "\17\15\1\244\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\24\15\2\0\15\15\1\245\2\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\24\15\2\0\12\15"+
    "\1\246\5\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\24\15\2\0\15\15\1\247\2\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\24\15\2\0\5\15"+
    "\1\250\12\15\6\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\24\15\2\0\11\15\1\251\6\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\24\15\2\0\10\15"+
    "\1\252\7\15\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7000];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\2\1\1\11\14\1\4\11"+
    "\222\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

  private Symbol sym(int sym) {
    return new Symbol(sym);
  }

  private Symbol sym(int sym, Object val) {
    return new Symbol(sym, val);
  }
  
  public void printData(String type, String text){
	  this.data += "[" + type + ": " + text + "  Line: " + yyline + " Column: " + yycolumn + "]\n";
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Unexpected character ["+yytext()+"]");
            }
          // fall through
          case 40: break;
          case 2:
            { /* eat whitespace */
            }
          // fall through
          case 41: break;
          case 3:
            { System.out.print(yytext());
            }
          // fall through
          case 42: break;
          case 4:
            { printData("COMMA", yytext()); return sym(COMMA);
            }
          // fall through
          case 43: break;
          case 5:
            { printData("NUMERO", yytext()); return sym(NUMBER, yytext());
            }
          // fall through
          case 44: break;
          case 6:
            { printData("COLON", yytext()); return sym(COLON);
            }
          // fall through
          case 45: break;
          case 7:
            { printData("VARIABLE", yytext()); return sym(FREETEXT, yytext());
            }
          // fall through
          case 46: break;
          case 8:
            { printData("LBRACKET", yytext()); return sym(LBRACKET);
            }
          // fall through
          case 47: break;
          case 9:
            { printData("RBRACKET", yytext()); return sym(RBRACKET);
            }
          // fall through
          case 48: break;
          case 10:
            { printData("LBRACE", yytext()); return sym(LBRACE);
            }
          // fall through
          case 49: break;
          case 11:
            { printData("RBRACE", yytext()); return sym(RBRACE);
            }
          // fall through
          case 50: break;
          case 12:
            { /* one-line comment */
            }
          // fall through
          case 51: break;
          case 13:
            { printData("ANN", yytext()); return sym(ANN);
            }
          // fall through
          case 52: break;
          case 14:
            { printData("SVM", yytext()); return sym(SVM);
            }
          // fall through
          case 53: break;
          case 15:
            { printData("TREE", yytext()); return sym(TREE);
            }
          // fall through
          case 54: break;
          case 16:
            { printData("INPUT", yytext()); return sym(INPUT);
            }
          // fall through
          case 55: break;
          case 17:
            { printData("LAYER", yytext()); return sym(LAYER);
            }
          // fall through
          case 56: break;
          case 18:
            { printData("MODEL", yytext()); return sym(MODEL);
            }
          // fall through
          case 57: break;
          case 19:
            { printData("BINARY", yytext()); return sym(BINARY);
            }
          // fall through
          case 58: break;
          case 20:
            { printData("INPUTS", yytext()); return sym(INPUTS);
            }
          // fall through
          case 59: break;
          case 21:
            { printData("LAYERS", yytext()); return sym(LAYERS);
            }
          // fall through
          case 60: break;
          case 22:
            { printData("OUTPUT", yytext()); return sym(OUTPUT);
            }
          // fall through
          case 61: break;
          case 23:
            { printData("OUTPUTS", yytext()); return sym(OUTPUTS);
            }
          // fall through
          case 62: break;
          case 24:
            { printData("CLASSIFIER", yytext()); return sym(CLASSIFIER);
            }
          // fall through
          case 63: break;
          case 25:
            { printData("CLUSTERING", yytext()); return sym(CLUSTERING);
            }
          // fall through
          case 64: break;
          case 26:
            { printData("INPUT_NAME", yytext()); return sym(INPUT_NAME);
            }
          // fall through
          case 65: break;
          case 27:
            { printData("INPUT_TYPE", yytext()); return sym(INPUT_TYPE);
            }
          // fall through
          case 66: break;
          case 28:
            { printData("LAYER_NAME", yytext()); return sym(LAYER_NAME);
            }
          // fall through
          case 67: break;
          case 29:
            { printData("MODEL_NAME", yytext()); return sym(MODEL_NAME);
            }
          // fall through
          case 68: break;
          case 30:
            { printData("MODEL_TYPE", yytext()); return sym(MODEL_TYPE);
            }
          // fall through
          case 69: break;
          case 31:
            { printData("REGRESSION", yytext()); return sym(REGRESSION);
            }
          // fall through
          case 70: break;
          case 32:
            { printData("CATEGORICAL", yytext()); return sym(CATEGORICAL);
            }
          // fall through
          case 71: break;
          case 33:
            { printData("OUTPUT_NAME", yytext()); return sym(OUTPUT_NAME);
            }
          // fall through
          case 72: break;
          case 34:
            { printData("OUTPUT_TYPE", yytext()); return sym(OUTPUT_TYPE);
            }
          // fall through
          case 73: break;
          case 35:
            { printData("DECISIONTREE", yytext()); return sym(DECISIONTREE);
            }
          // fall through
          case 74: break;
          case 36:
            { printData("LAYER_PARAMS", yytext()); return sym(LAYER_PARAMS);
            }
          // fall through
          case 75: break;
          case 37:
            { printData("MODEL_FAMILY", yytext()); return sym(MODEL_FAMILY);
            }
          // fall through
          case 76: break;
          case 38:
            { printData("RANDOMFOREST", yytext()); return sym(RANDOMFOREST);
            }
          // fall through
          case 77: break;
          case 39:
            { printData("MODEL_DESCRIPTION", yytext()); return sym(MODEL_DESCRIPTION);
            }
          // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }

  public String getData() {
		return data;
	}

	public void setData(String data) {
		this.data = data;
	}

}
